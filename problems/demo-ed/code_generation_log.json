[
  {
    "kind": "constraint",
    "target": "The total units of water used for producing liquid and foam hand sanitizers must not exceed the available water supply",
    "prompt": "\nYou are an expert in mathematical programming. Convert the following constraint into solver-ready gurobipy code in Python.\n\nProblem description:\n-----\nA company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?\n-----\n\nRelevant parameters (JSON):\n{\n  \"WaterPerLiquid\": {\n    \"definition\": \"Units of water required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AlcoholPerLiquid\": {\n    \"definition\": \"Units of alcohol required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 50\n  },\n  \"WaterPerFoam\": {\n    \"definition\": \"Units of water required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 60\n  },\n  \"AlcoholPerFoam\": {\n    \"definition\": \"Units of alcohol required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AvailableWater\": {\n    \"definition\": \"Total units of water available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2000\n  },\n  \"AvailableAlcohol\": {\n    \"definition\": \"Total units of alcohol available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2100\n  },\n  \"MaxLiquidProduction\": {\n    \"definition\": \"Maximum number of liquid hand sanitizers that can be produced\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerLiquid\": {\n    \"definition\": \"Number of hands cleaned by one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerFoam\": {\n    \"definition\": \"Number of hands cleaned by one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 20\n  }\n}\n\nCurrent decision variables (JSON):\n{\n  \"numLiquid\": {\n    \"definition\": \"Number of liquid hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  },\n  \"numFoam\": {\n    \"definition\": \"Number of foam hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  }\n}\n\nConstraint to implement (JSON):\n{\n  \"description\": \"The total units of water used for producing liquid and foam hand sanitizers must not exceed the available water supply\",\n  \"formulation\": \"$\\\\text{WaterPerLiquid} \\\\cdot \\\\text{numLiquid} + \\\\text{WaterPerFoam} \\\\cdot \\\\text{numFoam} \\\\leq \\\\text{AvailableWater}$\",\n  \"code\": null\n}\n\nImplementation requirements:\n- Assume the Gurobi model has already been instantiated as `model`.\n- Only emit the code that creates this constraint. Do not include imports, parameter loading, or variable creation.\n- Use `model.addConstr` / `model.addConstrs` as appropriate.\n- For multi-dimensional variables, use Gurobi's tuple indexing (e.g., `Var[i, j]`).\n- For parameter arrays, use Python list indexing (e.g., `Param[i][j]`).\n\nReturn your answer strictly in this format:\nCODE\n=====\n<python code implementing the constraint>\n=====\n\nDo not add explanations before or after the block.\n",
    "response": "CODE\n=====\nmodel.addConstr(WaterPerLiquid * numLiquid + WaterPerFoam * numFoam <= AvailableWater)\n====="
  },
  {
    "kind": "constraint",
    "target": "The total units of alcohol used for producing liquid and foam hand sanitizers must not exceed the available alcohol supply",
    "prompt": "\nYou are an expert in mathematical programming. Convert the following constraint into solver-ready gurobipy code in Python.\n\nProblem description:\n-----\nA company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?\n-----\n\nRelevant parameters (JSON):\n{\n  \"WaterPerLiquid\": {\n    \"definition\": \"Units of water required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AlcoholPerLiquid\": {\n    \"definition\": \"Units of alcohol required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 50\n  },\n  \"WaterPerFoam\": {\n    \"definition\": \"Units of water required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 60\n  },\n  \"AlcoholPerFoam\": {\n    \"definition\": \"Units of alcohol required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AvailableWater\": {\n    \"definition\": \"Total units of water available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2000\n  },\n  \"AvailableAlcohol\": {\n    \"definition\": \"Total units of alcohol available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2100\n  },\n  \"MaxLiquidProduction\": {\n    \"definition\": \"Maximum number of liquid hand sanitizers that can be produced\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerLiquid\": {\n    \"definition\": \"Number of hands cleaned by one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerFoam\": {\n    \"definition\": \"Number of hands cleaned by one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 20\n  }\n}\n\nCurrent decision variables (JSON):\n{\n  \"numLiquid\": {\n    \"definition\": \"Number of liquid hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  },\n  \"numFoam\": {\n    \"definition\": \"Number of foam hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  }\n}\n\nConstraint to implement (JSON):\n{\n  \"description\": \"The total units of alcohol used for producing liquid and foam hand sanitizers must not exceed the available alcohol supply\",\n  \"formulation\": \"$AlcoholPerLiquid \\\\times numLiquid + AlcoholPerFoam \\\\times numFoam \\\\leq AvailableAlcohol$\",\n  \"code\": null\n}\n\nImplementation requirements:\n- Assume the Gurobi model has already been instantiated as `model`.\n- Only emit the code that creates this constraint. Do not include imports, parameter loading, or variable creation.\n- Use `model.addConstr` / `model.addConstrs` as appropriate.\n- For multi-dimensional variables, use Gurobi's tuple indexing (e.g., `Var[i, j]`).\n- For parameter arrays, use Python list indexing (e.g., `Param[i][j]`).\n\nReturn your answer strictly in this format:\nCODE\n=====\n<python code implementing the constraint>\n=====\n\nDo not add explanations before or after the block.\n",
    "response": "CODE\n=====\nmodel.addConstr(AlcoholPerLiquid * numLiquid + AlcoholPerFoam * numFoam <= AvailableAlcohol)\n====="
  },
  {
    "kind": "constraint",
    "target": "The number of foam hand sanitizers produced must be greater than the number of liquid hand sanitizers produced",
    "prompt": "\nYou are an expert in mathematical programming. Convert the following constraint into solver-ready gurobipy code in Python.\n\nProblem description:\n-----\nA company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?\n-----\n\nRelevant parameters (JSON):\n{\n  \"WaterPerLiquid\": {\n    \"definition\": \"Units of water required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AlcoholPerLiquid\": {\n    \"definition\": \"Units of alcohol required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 50\n  },\n  \"WaterPerFoam\": {\n    \"definition\": \"Units of water required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 60\n  },\n  \"AlcoholPerFoam\": {\n    \"definition\": \"Units of alcohol required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AvailableWater\": {\n    \"definition\": \"Total units of water available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2000\n  },\n  \"AvailableAlcohol\": {\n    \"definition\": \"Total units of alcohol available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2100\n  },\n  \"MaxLiquidProduction\": {\n    \"definition\": \"Maximum number of liquid hand sanitizers that can be produced\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerLiquid\": {\n    \"definition\": \"Number of hands cleaned by one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerFoam\": {\n    \"definition\": \"Number of hands cleaned by one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 20\n  }\n}\n\nCurrent decision variables (JSON):\n{\n  \"numLiquid\": {\n    \"definition\": \"Number of liquid hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  },\n  \"numFoam\": {\n    \"definition\": \"Number of foam hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  }\n}\n\nConstraint to implement (JSON):\n{\n  \"description\": \"The number of foam hand sanitizers produced must be greater than the number of liquid hand sanitizers produced\",\n  \"formulation\": \"$numFoam > numLiquid$\",\n  \"code\": null\n}\n\nImplementation requirements:\n- Assume the Gurobi model has already been instantiated as `model`.\n- Only emit the code that creates this constraint. Do not include imports, parameter loading, or variable creation.\n- Use `model.addConstr` / `model.addConstrs` as appropriate.\n- For multi-dimensional variables, use Gurobi's tuple indexing (e.g., `Var[i, j]`).\n- For parameter arrays, use Python list indexing (e.g., `Param[i][j]`).\n\nReturn your answer strictly in this format:\nCODE\n=====\n<python code implementing the constraint>\n=====\n\nDo not add explanations before or after the block.\n",
    "response": "CODE\n=====\nmodel.addConstr(numFoam >= numLiquid + 1, name=\"foam_more_than_liquid\")\n====="
  },
  {
    "kind": "constraint",
    "target": "The number of liquid hand sanitizers produced must not exceed the maximum allowed production limit",
    "prompt": "\nYou are an expert in mathematical programming. Convert the following constraint into solver-ready gurobipy code in Python.\n\nProblem description:\n-----\nA company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?\n-----\n\nRelevant parameters (JSON):\n{\n  \"WaterPerLiquid\": {\n    \"definition\": \"Units of water required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AlcoholPerLiquid\": {\n    \"definition\": \"Units of alcohol required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 50\n  },\n  \"WaterPerFoam\": {\n    \"definition\": \"Units of water required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 60\n  },\n  \"AlcoholPerFoam\": {\n    \"definition\": \"Units of alcohol required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AvailableWater\": {\n    \"definition\": \"Total units of water available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2000\n  },\n  \"AvailableAlcohol\": {\n    \"definition\": \"Total units of alcohol available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2100\n  },\n  \"MaxLiquidProduction\": {\n    \"definition\": \"Maximum number of liquid hand sanitizers that can be produced\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerLiquid\": {\n    \"definition\": \"Number of hands cleaned by one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerFoam\": {\n    \"definition\": \"Number of hands cleaned by one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 20\n  }\n}\n\nCurrent decision variables (JSON):\n{\n  \"numLiquid\": {\n    \"definition\": \"Number of liquid hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  },\n  \"numFoam\": {\n    \"definition\": \"Number of foam hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  }\n}\n\nConstraint to implement (JSON):\n{\n  \"description\": \"The number of liquid hand sanitizers produced must not exceed the maximum allowed production limit\",\n  \"formulation\": \"$numLiquid \\\\leq MaxLiquidProduction$\",\n  \"code\": null\n}\n\nImplementation requirements:\n- Assume the Gurobi model has already been instantiated as `model`.\n- Only emit the code that creates this constraint. Do not include imports, parameter loading, or variable creation.\n- Use `model.addConstr` / `model.addConstrs` as appropriate.\n- For multi-dimensional variables, use Gurobi's tuple indexing (e.g., `Var[i, j]`).\n- For parameter arrays, use Python list indexing (e.g., `Param[i][j]`).\n\nReturn your answer strictly in this format:\nCODE\n=====\n<python code implementing the constraint>\n=====\n\nDo not add explanations before or after the block.\n",
    "response": "CODE\n=====\nmodel.addConstr(numLiquid <= MaxLiquidProduction)\n====="
  },
  {
    "kind": "constraint",
    "target": "The number of liquid hand sanitizers produced must be non-negative",
    "prompt": "\nYou are an expert in mathematical programming. Convert the following constraint into solver-ready gurobipy code in Python.\n\nProblem description:\n-----\nA company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?\n-----\n\nRelevant parameters (JSON):\n{\n  \"WaterPerLiquid\": {\n    \"definition\": \"Units of water required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AlcoholPerLiquid\": {\n    \"definition\": \"Units of alcohol required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 50\n  },\n  \"WaterPerFoam\": {\n    \"definition\": \"Units of water required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 60\n  },\n  \"AlcoholPerFoam\": {\n    \"definition\": \"Units of alcohol required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AvailableWater\": {\n    \"definition\": \"Total units of water available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2000\n  },\n  \"AvailableAlcohol\": {\n    \"definition\": \"Total units of alcohol available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2100\n  },\n  \"MaxLiquidProduction\": {\n    \"definition\": \"Maximum number of liquid hand sanitizers that can be produced\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerLiquid\": {\n    \"definition\": \"Number of hands cleaned by one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerFoam\": {\n    \"definition\": \"Number of hands cleaned by one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 20\n  }\n}\n\nCurrent decision variables (JSON):\n{\n  \"numLiquid\": {\n    \"definition\": \"Number of liquid hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  },\n  \"numFoam\": {\n    \"definition\": \"Number of foam hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  }\n}\n\nConstraint to implement (JSON):\n{\n  \"description\": \"The number of liquid hand sanitizers produced must be non-negative\",\n  \"formulation\": \"$numLiquid \\\\geq 0$\",\n  \"code\": null\n}\n\nImplementation requirements:\n- Assume the Gurobi model has already been instantiated as `model`.\n- Only emit the code that creates this constraint. Do not include imports, parameter loading, or variable creation.\n- Use `model.addConstr` / `model.addConstrs` as appropriate.\n- For multi-dimensional variables, use Gurobi's tuple indexing (e.g., `Var[i, j]`).\n- For parameter arrays, use Python list indexing (e.g., `Param[i][j]`).\n\nReturn your answer strictly in this format:\nCODE\n=====\n<python code implementing the constraint>\n=====\n\nDo not add explanations before or after the block.\n",
    "response": "CODE\n=====\nmodel.addConstr(numLiquid >= 0)\n====="
  },
  {
    "kind": "constraint",
    "target": "The number of foam hand sanitizers produced must be non-negative",
    "prompt": "\nYou are an expert in mathematical programming. Convert the following constraint into solver-ready gurobipy code in Python.\n\nProblem description:\n-----\nA company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?\n-----\n\nRelevant parameters (JSON):\n{\n  \"WaterPerLiquid\": {\n    \"definition\": \"Units of water required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AlcoholPerLiquid\": {\n    \"definition\": \"Units of alcohol required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 50\n  },\n  \"WaterPerFoam\": {\n    \"definition\": \"Units of water required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 60\n  },\n  \"AlcoholPerFoam\": {\n    \"definition\": \"Units of alcohol required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AvailableWater\": {\n    \"definition\": \"Total units of water available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2000\n  },\n  \"AvailableAlcohol\": {\n    \"definition\": \"Total units of alcohol available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2100\n  },\n  \"MaxLiquidProduction\": {\n    \"definition\": \"Maximum number of liquid hand sanitizers that can be produced\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerLiquid\": {\n    \"definition\": \"Number of hands cleaned by one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerFoam\": {\n    \"definition\": \"Number of hands cleaned by one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 20\n  }\n}\n\nCurrent decision variables (JSON):\n{\n  \"numLiquid\": {\n    \"definition\": \"Number of liquid hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  },\n  \"numFoam\": {\n    \"definition\": \"Number of foam hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  }\n}\n\nConstraint to implement (JSON):\n{\n  \"description\": \"The number of foam hand sanitizers produced must be non-negative\",\n  \"formulation\": \"$numFoam \\\\geq 0$\",\n  \"code\": null\n}\n\nImplementation requirements:\n- Assume the Gurobi model has already been instantiated as `model`.\n- Only emit the code that creates this constraint. Do not include imports, parameter loading, or variable creation.\n- Use `model.addConstr` / `model.addConstrs` as appropriate.\n- For multi-dimensional variables, use Gurobi's tuple indexing (e.g., `Var[i, j]`).\n- For parameter arrays, use Python list indexing (e.g., `Param[i][j]`).\n\nReturn your answer strictly in this format:\nCODE\n=====\n<python code implementing the constraint>\n=====\n\nDo not add explanations before or after the block.\n",
    "response": "CODE\n=====\nmodel.addConstr(numFoam >= 0)\n====="
  },
  {
    "kind": "objective",
    "target": "The goal is to maximize the number of hands that can be cleaned by producing liquid and foam hand sanitizers",
    "prompt": "\nYou are an expert in mathematical programming. Convert the following optimization objective into solver-ready gurobipy code in Python.\n\nProblem description:\n-----\nA company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?\n-----\n\nRelevant parameters (JSON):\n{\n  \"WaterPerLiquid\": {\n    \"definition\": \"Units of water required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AlcoholPerLiquid\": {\n    \"definition\": \"Units of alcohol required to produce one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 50\n  },\n  \"WaterPerFoam\": {\n    \"definition\": \"Units of water required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 60\n  },\n  \"AlcoholPerFoam\": {\n    \"definition\": \"Units of alcohol required to produce one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 40\n  },\n  \"AvailableWater\": {\n    \"definition\": \"Total units of water available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2000\n  },\n  \"AvailableAlcohol\": {\n    \"definition\": \"Total units of alcohol available for production\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 2100\n  },\n  \"MaxLiquidProduction\": {\n    \"definition\": \"Maximum number of liquid hand sanitizers that can be produced\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerLiquid\": {\n    \"definition\": \"Number of hands cleaned by one unit of liquid hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 30\n  },\n  \"HandsCleanedPerFoam\": {\n    \"definition\": \"Number of hands cleaned by one unit of foam hand sanitizer\",\n    \"type\": \"int\",\n    \"shape\": [],\n    \"value\": 20\n  }\n}\n\nCurrent decision variables (JSON):\n{\n  \"numLiquid\": {\n    \"definition\": \"Number of liquid hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  },\n  \"numFoam\": {\n    \"definition\": \"Number of foam hand sanitizers produced\",\n    \"type\": \"int\",\n    \"shape\": []\n  }\n}\n\nObjective to implement (JSON):\n{\n  \"description\": \"The goal is to maximize the number of hands that can be cleaned by producing liquid and foam hand sanitizers\",\n  \"formulation\": \"$$\\\\max \\\\quad 30 \\\\cdot \\\\text{numLiquid} + 20 \\\\cdot \\\\text{numFoam}$$\",\n  \"code\": null\n}\n\nImplementation requirements:\n- Assume the Gurobi model has already been instantiated as `model`.\n- Only emit the code that defines the objective (no imports or variable declarations).\n- Use `model.setObjective` with `GRB.MAXIMIZE` or `GRB.MINIMIZE` as appropriate.\n- Employ `quicksum` for summations when helpful.\n\nReturn your answer strictly in this format:\nCODE\n=====\n<python code implementing the objective>\n=====\n\nDo not add explanations before or after the block.\n",
    "response": "CODE\n=====\nmodel.setObjective(30 * numLiquid + 20 * numFoam, GRB.MAXIMIZE)\n====="
  }
]