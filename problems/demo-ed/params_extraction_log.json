{
  "prompt": "You are an optimization modeling expert. Given the natural language description of an optimization problem, extract every known parameter and express them in a strict JSON object.\n\nDescription:\n-----\nA restaurant has two combos available to their customers, an original and an experimental meal. The original meal typically generates 20 units of food waste and 45 units of wrapping waste and takes 10 minutes to cook. In comparison, the experimental meal generates 25 units of food waste and 35 units of wrapping waste and takes 15 minutes to cook. The restaurant can have at most 900 units of wrapping waste and can have at most 800 units of food waste as regulated by the government. How many of each combo should be pushed for by the waiting staff to minimize the cooking time?\n-----\n\nRules:\n1. Each top-level key is the parameter name in CamelCase.\n2. Each value is an object with the fields 'definition', 'shape', 'type', 'value'.\n3. 'shape' must be a Python-style list literal: [] for scalar, [N], [N, M], etc.\n4. 'type' must be one of 'int', 'float', 'binary'.\n5. If a numeric value is explicitly stated in the description, place it in 'value' using numbers or lists; otherwise use null.\n6. Do not include commentary before or after the JSON object.\n\nExample output:\n{\n  \"NumberOfFactories\": {\n    \"definition\": \"How many factories can produce the goods\",\n    \"shape\": \"[]\",\n    \"type\": \"int\",\n    \"value\": 3\n  },\n  \"DemandPerRegion\": {\n    \"definition\": \"Demand for each served region\",\n    \"shape\": \"[R]\",\n    \"type\": \"float\",\n    \"value\": [1200.0, 950.0, 640.0]\n  }\n}\n",
  "response": "{\n  \"FoodWasteOriginal\": {\n    \"definition\": \"Food waste generated by the original meal combo\",\n    \"shape\": [],\n    \"type\": \"int\",\n    \"value\": 20\n  },\n  \"WrappingWasteOriginal\": {\n    \"definition\": \"Wrapping waste generated by the original meal combo\",\n    \"shape\": [],\n    \"type\": \"int\",\n    \"value\": 45\n  },\n  \"CookingTimeOriginal\": {\n    \"definition\": \"Cooking time for the original meal combo in minutes\",\n    \"shape\": [],\n    \"type\": \"int\",\n    \"value\": 10\n  },\n  \"FoodWasteExperimental\": {\n    \"definition\": \"Food waste generated by the experimental meal combo\",\n    \"shape\": [],\n    \"type\": \"int\",\n    \"value\": 25\n  },\n  \"WrappingWasteExperimental\": {\n    \"definition\": \"Wrapping waste generated by the experimental meal combo\",\n    \"shape\": [],\n    \"type\": \"int\",\n    \"value\": 35\n  },\n  \"CookingTimeExperimental\": {\n    \"definition\": \"Cooking time for the experimental meal combo in minutes\",\n    \"shape\": [],\n    \"type\": \"int\",\n    \"value\": 15\n  },\n  \"MaxFoodWaste\": {\n    \"definition\": \"Maximum allowable food waste as regulated by the government\",\n    \"shape\": [],\n    \"type\": \"int\",\n    \"value\": 800\n  },\n  \"MaxWrappingWaste\": {\n    \"definition\": \"Maximum allowable wrapping waste as regulated by the government\",\n    \"shape\": [],\n    \"type\": \"int\",\n    \"value\": 900\n  }\n}"
}